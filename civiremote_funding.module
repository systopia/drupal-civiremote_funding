<?php

/*
 * Copyright (C) 2022 SYSTOPIA GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

use Drupal\civiremote_funding\Api\FundingApi;
use Drupal\civiremote_funding\Breadcrumb\BreadcrumbRouteAnalyzer;
use Drupal\civiremote_funding\File\FundingFileDownloadHook;
use Drupal\civiremote_funding\File\FundingFileManager;
use Drupal\civiremote_funding\Install\DashboardBlockInstaller;
use Drupal\civiremote_funding\Views\ApplicationProcessDropButton;
use Drupal\civiremote_funding\ViewTranslator;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\file\FileInterface;
use Drupal\views\Plugin\views\field\Dropbutton;
use Drupal\views\ViewExecutable;

function civiremote_funding_views_pre_build(ViewExecutable $view): void {
  if (!in_array($view->id(), ['civiremote_funding_application_list', 'civiremote_funding_combined_application_process_list'], TRUE)) {
    return;
  }

  if (($view->field['dropbutton'] ?? NULL) instanceof Dropbutton) {
    /** @var \Drupal\civiremote_funding\Api\FundingApi $fundingApi */
    $fundingApi = \Drupal::service(FundingApi::class);
    $view->field['dropbutton'] = new ApplicationProcessDropButton($fundingApi, $view->field['dropbutton']);
  }
}

/**
 * Implements hook_rebuild().
 */
function civiremote_funding_rebuild(): void {
  /** @var ViewTranslator $viewTranslator */
  $viewTranslator = \Drupal::service(ViewTranslator::class);
  $viewTranslator->translateViews('views.view.civiremote_funding_');
}

/**
 * Implements hook_batch_alter().
 *
 * @param array<string, mixed> $batch See \batch_set() for details.
 *
 * @see \batch_set()
 */
function civiremote_funding_batch_alter(array &$batch): void {
  // Translate views when language is added
  // @phpstan-ignore-next-line
  foreach ($batch['sets'] ?? [] as &$set) {
    // @phpstan-ignore-next-line
    if ('locale_translation_batch_fetch_finished' === ($set['finished'] ?? NULL)) {
      // @phpstan-ignore-next-line
      $batch['sets'][] = [
        'operations' => [],
        'finished' => 'translateViews',
        'results' => [],
        'elapsed' => 0,
      ];
      break;
    }
  }
}

/**
 * Implements hook_theme().
 *
 * @return array<string, mixed>
 */
function civiremote_funding_theme(): array {
  return [
    'civiremote_funding_application_history' => [
      'template' => 'application/history',
      'render element' => 'civiremote_funding_application_history',
    ],
    'civiremote_funding_application_history_entry' => [
      'template' => 'application/history_entry',
      'variables' => [
        'attributes' => [],
        'title' => NULL,
        'icon' => NULL,
        'icon_color' => NULL,
        'date' => NULL,
        'content' => NULL,
      ],
    ],
    'civiremote_funding_dashboard_element' => [
      'template' => 'dashboard_element',
      'render element' => 'civiremote_funding_dashboard_element',
    ],
  ];
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function civiremote_funding_system_breadcrumb_alter(Breadcrumb $breadcrumb, RouteMatchInterface $routeMatch): void {
  $route = $routeMatch->getRouteObject();
  if (NULL !== $route && BreadcrumbRouteAnalyzer::create(\Drupal::getContainer())->containsVariableData($route)) {
    // If breadcrumb contains data that might change, i.e. funding case name, it should not take too long until a
    // change is reflected in breadcrumb.
    $cacheableMetadata = (new CacheableMetadata())->setCacheMaxAge(600);
    $breadcrumb->addCacheableDependency($cacheableMetadata);
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function civiremote_funding_file_predelete(FileInterface $file): void {
  /** @var \Drupal\civiremote_funding\File\FundingFileManager $fundingFileManager */
  $fundingFileManager = \Drupal::service(FundingFileManager::class);
  $fundingFileManager->onFilePreDelete($file);
}

/**
 * Implements hook_file_download().
 *
 * @return array<string, mixed>
 */
function civiremote_funding_file_download(string $uri): array {
  /** @var \Drupal\civiremote_funding\File\FundingFileDownloadHook $fundingFileDownloadHook */
  $fundingFileDownloadHook = \Drupal::service(FundingFileDownloadHook::class);

  return $fundingFileDownloadHook($uri);
}

/**
 * Implements hook_cron().
 */
function civiremote_funding_cron(): void {
  $cleanupDelay = \Drupal::config('civiremote_funding.settings')->get('file_cleanup_delay') ?? 0;
  if (!is_int($cleanupDelay) || 0 === $cleanupDelay) {
    return;
  }

  /** @var \Drupal\civiremote_funding\File\FundingFileManager $fundingFileManager */
  $fundingFileManager = \Drupal::service(FundingFileManager::class);
  foreach ($fundingFileManager->loadByLastAccessBefore(time() - $cleanupDelay) as $fundingFile) {
    $fundingFileManager->delete($fundingFile);
  }
}

/**
 * Implements hook_install().
 */
function civiremote_funding_install(): void {
  DashboardBlockInstaller::addDashboardBlocks();
}
